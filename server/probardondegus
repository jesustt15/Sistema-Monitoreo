#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_AHT10.h>

// Definir los pines del sensor AHT10
#define SDA_PIN 21
#define SCL_PIN 22

const char* ssid = "tu_SSID";
const char* password = "tu_contraseña";
const char* serverName = "http://192.168.1.100:3000/sensor/valores"; // Cambia esto a la URL de tu servidor

Adafruit_AHT10 aht10;
const char* espID = "ESP32_1"; // Identificador único para este ESP32

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }

  Serial.println("Conectado a la red WiFi");

  // Inicializar el sensor AHT10
  if (!aht10.begin(SDA_PIN, SCL_PIN)) {
    Serial.println("No se pudo encontrar un sensor AHT10");
    while (1) delay(10);
  }
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverName);
    http.addHeader("Content-Type", "application/json");

    sensors_event_t humidity, temp;
    aht10.getEvent(&humidity, &temp);

    if (isnan(temp.temperature) || isnan(humidity.relative_humidity)) {
      Serial.println("Error al leer el sensor AHT10");
      return;
    }

    // Crear el payload JSON
    String jsonPayload = "{\"lugar_id}\": \"" + String(espID) + "\", \"tempValue\": " + String(temp.temperature) + ", \"humValue\": " + String(humidity.relative_humidity) + "}";
    int httpResponseCode = http.POST(jsonPayload);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);
    } else {
      Serial.print("Error en la solicitud POST: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("Error en la conexión WiFi");
  }

  delay(60000); // Enviar datos cada minuto
}


//codigo del server
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;

app.use(bodyParser.json());

app.post('/api/temperatura', (req, res) => {
  const { temperatura } = req.body;
  console.log(`Temperatura recibida: ${temperatura}°C`);
  res.status(200).send('Datos recibidos');
});

app.listen(port, () => {
  console.log(`Servidor escuchando en http://localhost:${port}`);
});

Dirección MAC de la ESP32: A0:DD:6C:85:AD:88